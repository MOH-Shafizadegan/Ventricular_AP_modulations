import numpy as np
import random
import os
import json
from datetime import datetime
import pandas as pd
from Functions.OpenCor_Py.opencor_helper import SimulationHelper
import matplotlib
import matplotlib.pyplot as plt
from SALib.sample import latin
from scipy.stats import qmc
matplotlib.use('Agg')
from mpl_toolkits.mplot3d import Axes3D
import warnings
warnings.filterwarnings("ignore", category=UserWarning)
import re
from sklearn.linear_model import LinearRegression
import itertools
from sklearn.preprocessing import MinMaxScaler
from Functions.AP_features import calculate_apd
from tqdm import tqdm
from multiprocessing import Pool, cpu_count

# ---- Function Definitions ---- #

def run_and_get_results(param_vals):
    sim_object.set_param_vals(param_names, param_vals)
    sim_object.reset_states()
    sim_object.run()
    y = sim_object.get_results(output_names)
    t = sim_object.tSim - pre_time
    return y, t    

def worker(args):
    idx, param_indices, param_vals = args
    current_param_val = init_param_vals.copy()
    for j, param_idx in enumerate(param_indices):
        current_param_val[param_idx] = param_vals[j]
    y, t = run_and_get_results(current_param_val)
    v = np.squeeze(y)
    apd = calculate_apd(t, v, repolarization_level, depolarization_threshold=-20)
    return (idx, v, apd)

# ---- Configuration ---- #

working_dir = os.path.join(os.path.dirname(__file__))
model_path = os.path.join(working_dir, "Models/ToRORd_dynCl_endo.cellml")

output_type = 'APD90'
date_time = datetime.now().isoformat()
repolarization_level = int(re.search(r'\d+', output_type).group())
output_file_path = os.path.join("outputs", "two_param_analysis", date_time, output_type)
os.makedirs(output_file_path, exist_ok=True)

pre_time = 0
sim_time = 800
dt = 1
n_mem_plot = 5
sample_type = 'qmc'

is_plot_sample_AP = 1
is_plot_scatter = 1

# ---- Initialize Simulation ---- #

sim_object = SimulationHelper(
    model_path, dt, sim_time,
    solver_info={'MaximumStep': 0.001, 'MaximumNumberOfSteps': 500000},
    pre_time=pre_time
)

param_names = ['extracellular/ko', 'IKr/GKr_b', 'ICaL/PCa_b']
param_vals_maxs = [5, 0.0121, 8.3757e-05]
param_vals_mins = [0.5 * val for val in param_vals_maxs]

problem = {
    'num_vars': len(param_names),
    'names': param_names,
    'bounds': list(zip(param_vals_mins, param_vals_maxs))
}
num_samples = 400

if sample_type == "lhs":
    samples = latin.sample(problem, num_samples)
elif sample_type == "qmc":
    sampler = qmc.Sobol(d=problem['num_vars'], scramble=True)
    qmc_samples = sampler.random(num_samples)
    samples = qmc.scale(qmc_samples, [b[0] for b in problem['bounds']], [b[1] for b in problem['bounds']])

# Save configuration to file
config_data = {
    "param_names": param_names,
    "param_vals_mins": param_vals_mins,
    "param_vals_maxs": param_vals_maxs,
    "num_samples": num_samples,
    "sample_type": sample_type,
    "output_type": output_type,
    "sim_time": sim_time,
    "dt": dt,
    "pre_time": pre_time
}
with open(os.path.join(output_file_path, "config.json"), 'w') as f:
    json.dump(config_data, f, indent=4)

output_names = ['membrane/v']
init_param_vals = sim_object.get_init_param_vals(param_names)
y, t = run_and_get_results(init_param_vals)
orig_v = np.squeeze(y)
orig_APD90 = calculate_apd(t, orig_v, repolarization_level, depolarization_threshold=-20)

param_combinations = list(itertools.combinations(range(len(param_names)), 2))
for combo in param_combinations:

    param1, param2 = combo
    param_subset = [param_names[param1], param_names[param2]]
    print(f"\nRunning simulations for parameter combination: {param_subset}")

    sim_object.set_param_vals(param_names, init_param_vals)

    param_vals_subset = samples[:, combo]
    args_list = [(i, combo, param_vals_subset[i]) for i in range(len(samples))]

    # Run simulations in parallel
    with Pool(processes=18) as pool:
        results = list(tqdm(pool.imap(worker, args_list), total=len(args_list)))

    results.sort()
    mem_Vs = [res[1] for res in results]
    APDs = [res[2] for res in results]

    param_labels = [re.search(r'(?<=/)(.*)', str(param)).group(1) if '/' in param else param for param in param_subset]
    param_label = "_".join(param_labels)

    df = pd.DataFrame(samples[:, combo], columns=param_labels)
    df[output_type] = APDs

    dataset_path = os.path.join(output_file_path, "dataset")
    os.makedirs(dataset_path, exist_ok=True)
    df.to_csv(os.path.join(dataset_path, f"{param_label}_data.csv"), index=False)

    # Plot sample APs
    if is_plot_sample_AP:
        selected_indices = random.sample(range(len(mem_Vs)), min(n_mem_plot, len(mem_Vs)))
        fig = plt.figure(figsize=(10, 5))
        plt.plot(t, orig_v, linewidth=2, color='black', linestyle='--',
                 label=f'Original AP \n {param_labels[0]} = {init_param_vals[param1]:.7f} | '
                       f'{param_labels[1]} = {init_param_vals[param2]:.7f}')
        for j in selected_indices:
            plt.plot(t, mem_Vs[j], label=f'{param_labels[0]} = {samples[j, param1]:.7f} | '
                                         f'{param_labels[1]} = {samples[j, param2]:.7f}')
        plt.xlabel('time (ms)')
        plt.ylabel('membrane potential (mV)')
        plt.grid(False)
        plt.legend()
        plt.title(f'Effects of {param_label}')
        plt.savefig(os.path.join(output_file_path, f"{param_label}_AP.png"))
        plt.clf()

    # Optional scatter 3D plot
    if is_plot_scatter:
        X = samples[:, combo] / np.max(samples[:, combo], axis=0)
        y_apd = APDs
        model = LinearRegression()
        model.fit(X, y_apd)
        coef1, coef2 = model.coef_
        intercept = model.intercept_

        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
        ax.scatter(X[:, 0], X[:, 1], y_apd, color='blue', label="Data")
        ax.set_xlabel(f"Normalized {param_subset[0]}")
        ax.set_ylabel(f"Normalized {param_subset[1]}")
        ax.set_zlabel(f"{output_type}")
        eq_text = f"{output_type} = {coef1:.6f} * {param_labels[0]} + {coef2:.6f} * {param_labels[1]} + {intercept:.3f}"
        ax.text2D(0.05, 0.95, eq_text, transform=ax.transAxes, fontsize=10, bbox=dict(facecolor='white', alpha=0.5))
        ax.set_title(f"Linear Regression: {param_labels[0]} and {param_labels[1]}")
        plt.savefig(os.path.join(output_file_path, f"{output_type}_{sample_type}_{param_label}_scatter3d.png"))
        plt.clf()
